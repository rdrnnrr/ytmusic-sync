"""Command line interface for ytmusic-sync."""

from __future__ import annotations

import argparse
import logging
from pathlib import Path

from .config import CONFIG_FILE, load_config, save_config
from .scanner import scan_music_directory
from .tracker import UploadTracker
from .uploader import AuthenticationError, YouTubeMusicUploader


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Sync local music to YouTube Music")
    parser.add_argument("music_dir", type=Path, help="Path to the music directory to scan")
    parser.add_argument(
        "--config",
        type=Path,
        default=CONFIG_FILE,
        help="Path to the shared configuration file (stores authentication headers).",
    )
    parser.add_argument(
        "--tracker",
        type=Path,
        default=Path.home() / ".ytmusic-sync" / "uploads.json",
        help="Path to the upload tracker JSON file",
    )
    parser.add_argument(
        "--headers",
        type=Path,
        default=argparse.SUPPRESS,
        help="Path to headers_auth.json generated by ytmusicapi setup (persisted to the config file)",
    )
    parser.add_argument(
        "--clear-headers",
        action="store_true",
        help="Remove any stored headers path from the configuration file",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Do not perform uploads, only log actions.",
    )
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    )
    return parser


def main(argv: list[str] | None = None) -> int:
    parser = build_parser()
    args = parser.parse_args(argv)

    logging.basicConfig(level=getattr(logging, args.log_level))

    config_path = args.config.expanduser()
    app_config = load_config(config_path)

    headers_override = getattr(args, "headers", None)
    if args.clear_headers:
        headers_path = None
        app_config.headers_path = None
        save_config(app_config, config_path)
    elif headers_override is not None:
        headers_path = headers_override.expanduser()
        app_config.headers_path = str(headers_path)
        save_config(app_config, config_path)
    else:
        headers_path = (
            Path(app_config.headers_path).expanduser() if app_config.headers_path else None
        )

    tracker = UploadTracker(args.tracker)
    uploader = YouTubeMusicUploader(tracker, headers_path=headers_path, dry_run=args.dry_run)

    try:
        media_files = scan_music_directory(args.music_dir)
        uploader.upload_media_files(media_files)
    except AuthenticationError as exc:
        logging.error("Authentication failed: %s", exc)
        return 1
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
