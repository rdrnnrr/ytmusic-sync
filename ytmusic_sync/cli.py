"""Command line interface for ytmusic-sync."""

from __future__ import annotations

import argparse
import logging
from pathlib import Path

from .scanner import scan_music_directory
from .tracker import UploadTracker
from .uploader import YouTubeMusicUploader


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Sync local music to YouTube Music")
    parser.add_argument("music_dir", type=Path, help="Path to the music directory to scan")
    parser.add_argument(
        "--tracker",
        type=Path,
        default=Path.home() / ".ytmusic-sync" / "uploads.json",
        help="Path to the upload tracker JSON file",
    )
    parser.add_argument(
        "--headers",
        type=Path,
        default=None,
        help="Path to headers_auth.json generated by ytmusicapi setup",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Do not perform uploads, only log actions.",
    )
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    )
    return parser


def main(argv: list[str] | None = None) -> int:
    parser = build_parser()
    args = parser.parse_args(argv)

    logging.basicConfig(level=getattr(logging, args.log_level))
    tracker = UploadTracker(args.tracker)
    uploader = YouTubeMusicUploader(tracker, headers_path=args.headers, dry_run=args.dry_run)

    media_files = scan_music_directory(args.music_dir)
    uploader.upload_media_files(media_files)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
